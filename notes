PROBLEMS TO SOLVE:

	- Deadlock scenario: 2 transactions depend each other releasing their locks
		Identify a deadlock: find loops in graphs of transaction -> keys
		Solution: choose best transaction to abort, abort it.


	- Wait for keys available, when other transaction is involved with overlapping key sets.

	- On commit release locked keys.

	- Support abort (roll back all previous puts)
		Solution: All puts must be stored for uncommited transactions, remembering the original (pre-put value)
		If null, eliminate (was no key pre-put), else restore original value
		On abort, all stored puts must be undone.


	- Locking.
	
		Solution: Each transaction stores a list of keys it depends on. If a transaction needs access to a key
		in this list, it must wait. If deadlock, abort 1 transaction and remove its keys from lockedKeys list.
		On commit, remove keys from lockedKeys list.

TODO:

- Implement v1  (one client + 1 kvnode, support ACI transactions)
	"Start by creating a transactional key-value service with a single node and a single connecting client. Have this service support transactional semantics without handling node/client failures."

	learn to import a library for client. 
		set Go variables?
		get code from remote repo?

	implement basic library



	implement basic kvnode

		support transactions

			put

			get

			commit

			abort

	test
